Ques:
c)	Stack minimum- Details of stack data structure is available in https://www.geeksforgeeks.org/stack-data-structure/
Stack has functions of push and pop. Can you also add a function ‘min’ to the stack and it should also execute in O(1). 

If you are not aware of O(1), refer to some videos online. E.g. https://en.wikipedia.org/wiki/Big_O_notation

Bonus 1 – 

Explain one real world use case where stack is better used data structure than arrays. 

Ans:

import java.util.*;

public class stackmin {

    Stack<Integer> stack;
    int min;

    // constructor to initialize the stack and minimum value
        stackmin(){
           stack = new Stack<>();
           min = Integer.MAX_VALUE;
        
        }

        // methods for push the element in to the stack
        void push(int x){
            if(stack.isEmpty()){
            // if the stack is empty ,push the element and update te minimum
            stack.push(x);
            min=x;
        }
        else if(x<= min){
            // if the element is less than or equal to current minimum, push
            // modifield value and update the minimum
            stack.push(2* x- min);
            min=x;
        }
        else{
            // if the elment is greater than the current minimum,push it as is 
            stack.push(x);
        }
     
        }

        //  method to pop an element form the stack
        void pop(){
           if(stack.isEmpty()){
            // if the stack is empty , indicate that it is already empty
            System.out.println("stack is already empty");
           }
           else if(stack.peek() <= min){
            // if the top element is less than or equal to minimum,
            // pop a modified value and update the minmum
            System.out.println("pop item is "+min);
            min =2*min -stack.pop();
           }
           else{
            // if the top element is greater than the minimum, pop it as is
            System.out.println("poped item is" + stack.pop());
           }
        }
        
        // method to get the current minimum element in the stack
        void getmin(){
            if(stack.isEmpty()){
                // if the stack is Empty, indicate that there is no minimum element 
                System.out.println("No minimum element present");
            }
            else{
                // print the current minimum element
                System.out.println("minimum element is: " +min);
            }
        }

        public static void main(String[] args){
            //  create an instance of My stack
            stackmin st = new stackmin();

            // performing the operation as per the provided test cases
            st.push(2);
            st.getmin();
            st.push(4);
            st.getmin();
            st.push(-1);
            st.getmin();
            st.push(3);
            st.getmin();
        }


}
